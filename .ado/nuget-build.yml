parameters:
- name: workingDirectory  # $(System.DefaultWorkingDiretory)/cocktails.common
  type: string
- name: slnFilePath
  type: string
- name: projectFilePath
  type: string
- name: nugetConfigPath
  type: string
- name: testsDirectoryPath
  type: string
- name: artifactName
  type: string
- name: branchType
  type: string
- name: buildConfiguration
  type: string

steps:
  - script: |
      echo "##vso[build.addbuildtag]nuget"
    displayName: 'Apply nuget tag'

  - task: UseDotNet@2
    displayName: 'Use NetCore 9.0.x'
    inputs:
      packageType: 'sdk'
      version: '9.0.x'

  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
      projects: '${{ parameters.workingDirectory }}/${{ parameters.slnFilePath }}'
      feedsToUse: 'config'
      nugetConfigPath: '${{ parameters.workingDirectory }}/${{ parameters.nugetConfigPath }}'

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '${{ parameters.workingDirectory }}/${{ parameters.slnFilePath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }}'

  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '${{ parameters.workingDirectory }}/${{ parameters.testsDirectoryPath }}/**/*.[Uu]nit.[Tt]ests/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --collect:"XPlat Code Coverage" -v:q -l:"console;verbosity=normal" --no-build'
      publishTestResults: false

  - task: reportgenerator@5
    displayName: 'Generate Code Coverage'
    inputs:
      reports: '${{ parameters.workingDirectory }}/**/*.cobertura.xml'
      targetdir: '${{ parameters.workingDirectory }}/CodeCoverage'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '${{ parameters.workingDirectory }}/CodeCoverage/Cobertura.xml'
      reportDirectory: '${{ parameters.workingDirectory }}/CodeCoverage'
    env:
      DISABLE_COVERAGE_AUTOGENERATE: 'true'

  - script: |
       dotnet pack "${{ parameters.workingDirectory }}/${{ parameters.projectFilePath }}" -c ${{ parameters.buildConfiguration }} -p:Version=1.0.$(Build.BuildId) --output '$(Build.ArtifactStagingDirectory)/nuget'
    displayName: 'Nuget Pack'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish nuget artifact'
    inputs:
      PathToPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      ArtifactName: '${{ parameters.artifactName }}'